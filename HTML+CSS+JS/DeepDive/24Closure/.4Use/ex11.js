// 카운트 상태 변경 함수
const increase = (function () {
  // 카운트 상태 변수
  let num = 0;

  // 클로저
  return function () {
    // 카운트 상태를 1만큼 증가시킨다.
    return ++num;
  };
}());

/* *'클로저' 함수가 안전한 이유
 * 
 * 식별자 increase에는 즉시 실행 함수가 호출되어 
 * 반환한 함수가 할당된다.
 * 식별자에 함수가 할당되었으므로 increase를 호출할 때마다
 * 해당 함수가 호출되는 것과 마찬가지이다.
 * increase에 할당된 함수는 정의된 위치에 따라 
 * 상위 스코프(렉시컬 환경)를 [[Environment]]에 기억하므로
 * 지역 변수인 num 값을 언제든 참조하고 유지 및 변경이 가능하다.
 * 
 * 즉시 실행 함수는 한 번만 실행되어 increase 함수를 호출할 때마다
 * num 값이 다시 초기화될 일은 없을 것이다.
 * num 변수는 외부에서 직접 접근할 수 없는 변수이므로 
 * 일반 함수에 비해 더 안정적인 프로그래밍이 가능하다.
 * 
 * 의도치 않은 상태 변경을 막기 위해 은닉하고,
 * 특정 함수에게만 상태 변경을 허용하는 것이 클로저의 사용 목적이다.
 */

console.log(increase()); // 1
console.log(increase()); // 2
console.log(increase()); // 3